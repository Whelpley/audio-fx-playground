import { OpaqueToken } from '@angular/core';
import { DataCloneErrorFactory } from '../factories/data-clone-error';
import { EncodingErrorFactory } from '../factories/encoding-error';
import { OfflineAudioBufferSourceNodeFakerFactory } from '../factories/offline-audio-buffer-source-node';
import { OfflineAudioDestinationNodeFakerFactory } from '../factories/offline-audio-destination-node';
import { OfflineBiquadFilterNodeFakerFactory } from '../factories/offline-biquad-filter-node';
import { OfflineGainNodeFakerFactory } from '../factories/offline-gain-node';
import { OfflineIIRFilterNodeFakerFactory } from '../factories/offline-iir-filter-node';
import { IOfflineAudioContextConstructor, IUnpatchedOfflineAudioContextConstructor } from '../interfaces';
import { AudioBufferCopyChannelMethodsSupportTester } from '../testers/audio-buffer-copy-channel-methods-support';
import { PromiseSupportTester } from '../testers/promise-support';
import { AudioBufferWrapper } from '../wrappers/audio-buffer';
import { AudioBufferCopyChannelMethodsWrapper } from '../wrappers/audio-buffer-copy-channel-methods';
import { IIRFilterNodeGetFrequencyResponseMethodWrapper } from '../wrappers/iir-filter-node-get-frequency-response-method';
export declare const offlineAudioContextConstructor: OpaqueToken;
export declare const OFFLINE_AUDIO_CONTEXT_CONSTRUCTOR_PROVIDER: {
    deps: (OpaqueToken | typeof DataCloneErrorFactory | typeof OfflineAudioBufferSourceNodeFakerFactory | typeof OfflineAudioDestinationNodeFakerFactory | typeof OfflineBiquadFilterNodeFakerFactory | typeof OfflineGainNodeFakerFactory | typeof PromiseSupportTester | typeof OfflineIIRFilterNodeFakerFactory | typeof AudioBufferWrapper | typeof AudioBufferCopyChannelMethodsWrapper | typeof IIRFilterNodeGetFrequencyResponseMethodWrapper)[];
    provide: OpaqueToken;
    useFactory: (audioBufferCopyChannelMethodsSupportTester: AudioBufferCopyChannelMethodsSupportTester, audioBufferCopyChannelMethodsWrapper: AudioBufferCopyChannelMethodsWrapper, audioBufferWrapper: AudioBufferWrapper, dataCloneErrorFactory: DataCloneErrorFactory, detachedAudioBuffers: WeakSet<ArrayBuffer>, encodingErrorFactory: EncodingErrorFactory, iIRFilterNodeGetFrequencyResponseMethodWrapper: IIRFilterNodeGetFrequencyResponseMethodWrapper, offlineAudioBufferSourceNodeFakerFactory: OfflineAudioBufferSourceNodeFakerFactory, offlineAudioDestinationNodeFakerFactory: OfflineAudioDestinationNodeFakerFactory, offlineBiquadFilterNodeFakerFactory: OfflineBiquadFilterNodeFakerFactory, offlineGainNodeFakerFactory: OfflineGainNodeFakerFactory, offlineIIRFilterNodeFakerFactory: OfflineIIRFilterNodeFakerFactory, promiseSupportTester: PromiseSupportTester, unpatchedOfflineAudioContextConstructor: IUnpatchedOfflineAudioContextConstructor) => IOfflineAudioContextConstructor;
};
