import { OpaqueToken } from '@angular/core';
import { DataCloneErrorFactory } from '../factories/data-clone-error';
import { EncodingErrorFactory } from '../factories/encoding-error';
import { InvalidStateErrorFactory } from '../factories/invalid-state-error';
import { IIRFilterNodeFaker } from '../fakers/iir-filter-node';
import { IAudioContextConstructor, IUnpatchedAudioContextConstructor } from '../interfaces';
import { AnalyserNodeGetFloatTimeDomainDataSupportTester } from '../testers/analyser-node-get-float-time-domain-data';
import { AudioBufferCopyChannelMethodsSupportTester } from '../testers/audio-buffer-copy-channel-methods-support';
import { ChainingSupportTester } from '../testers/chaining-support';
import { ConnectingSupportTester } from '../testers/connecting-support';
import { DisconnectingSupportTester } from '../testers/disconnecting-support';
import { PromiseSupportTester } from '../testers/promise-support';
import { StopStoppedSupportTester } from '../testers/stop-stopped-support';
import { AnalyserNodeGetFloatTimeDomainDataMethodWrapper } from '../wrappers/analyser-node-get-float-time-domain-data-method';
import { AudioBufferWrapper } from '../wrappers/audio-buffer';
import { AudioBufferCopyChannelMethodsWrapper } from '../wrappers/audio-buffer-copy-channel-methods';
import { AudioBufferSourceNodeStopMethodWrapper } from '../wrappers/audio-buffer-source-node-stop-method';
import { AudioNodeConnectMethodWrapper } from '../wrappers/audio-node-connect-method';
import { AudioNodeDisconnectMethodWrapper } from '../wrappers/audio-node-disconnect-method';
import { ChannelMergerNodeWrapper } from '../wrappers/channel-merger-node';
import { ChannelSplitterNodeWrapper } from '../wrappers/channel-splitter-node';
import { IIRFilterNodeGetFrequencyResponseMethodWrapper } from '../wrappers/iir-filter-node-get-frequency-response-method';
export declare const audioContextConstructor: OpaqueToken;
export declare const AUDIO_CONTEXT_CONSTRUCTOR_PROVIDER: {
    deps: (OpaqueToken | typeof DataCloneErrorFactory | typeof PromiseSupportTester | typeof IIRFilterNodeFaker | typeof ConnectingSupportTester | typeof DisconnectingSupportTester | typeof AnalyserNodeGetFloatTimeDomainDataMethodWrapper | typeof AudioBufferWrapper | typeof AudioBufferCopyChannelMethodsWrapper | typeof AudioBufferSourceNodeStopMethodWrapper | typeof AudioNodeConnectMethodWrapper | typeof ChannelMergerNodeWrapper | typeof ChannelSplitterNodeWrapper | typeof IIRFilterNodeGetFrequencyResponseMethodWrapper)[];
    provide: OpaqueToken;
    useFactory: (analyserNodeGetFloatTimeDomainDataMethodWrapper: AnalyserNodeGetFloatTimeDomainDataMethodWrapper, analyserNodeGetFloatTimeDomainDataSupportTester: AnalyserNodeGetFloatTimeDomainDataSupportTester, audioBufferCopyChannelMethodsSupportTester: AudioBufferCopyChannelMethodsSupportTester, audioBufferCopyChannelMethodsWrapper: AudioBufferCopyChannelMethodsWrapper, audioBufferSourceNodeStopMethodWrapper: AudioBufferSourceNodeStopMethodWrapper, audioBufferWrapper: AudioBufferWrapper, audioNodeConnectMethodWrapper: AudioNodeConnectMethodWrapper, audioNodeDisconnectMethodWrapper: AudioNodeDisconnectMethodWrapper, chainingSupportTester: ChainingSupportTester, channelMergerNodeWrapper: ChannelMergerNodeWrapper, channelSplitterNodeWrapper: ChannelSplitterNodeWrapper, connectingSupportTester: ConnectingSupportTester, dataCloneErrorFactory: DataCloneErrorFactory, detachedAudioBuffers: WeakSet<ArrayBuffer>, disconnectingSupportTester: DisconnectingSupportTester, encodingErrorFactory: EncodingErrorFactory, invalidStateErrorFactory: InvalidStateErrorFactory, iIRFilterNodeFaker: IIRFilterNodeFaker, iIRFilterNodeGetFrequencyResponseMethodWrapper: IIRFilterNodeGetFrequencyResponseMethodWrapper, promiseSupportTester: PromiseSupportTester, stopStoppedSupportTester: StopStoppedSupportTester, unpatchedAudioContextConstructor: IUnpatchedAudioContextConstructor) => IAudioContextConstructor;
};
