import { IAudioBufferSourceNode, IAudioNode, IOfflineAudioContext, IOfflineAudioNodeFaker } from '../interfaces';
import { OfflineAudioNodeProxy } from '../offline-audio-node';
import { TEndedEventHandler, TUnpatchedOfflineAudioContext } from '../types';
export interface IOfflineAudioBufferSourceNodeFakerProxyOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioBufferSourceNodeFakerProxy extends OfflineAudioNodeProxy implements IAudioBufferSourceNode {
    private _buffer;
    private _ownFakeNodeStore;
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineAudioBufferSourceNodeFakerProxyOptions);
    buffer: AudioBuffer | null;
    onended: null | TEndedEventHandler;
    readonly detune: AudioParam;
    readonly loop: boolean;
    readonly loopEnd: number;
    readonly loopStart: number;
    readonly playbackRate: AudioParam;
    start(when?: number, offset?: number, duration?: number): void;
    stop(when?: number): void;
}
export interface IOfflineAudioBufferSourceNodeFakerOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioBufferSourceNodeFaker implements IOfflineAudioNodeFaker {
    private _node;
    private _proxy;
    private _sources;
    private _start;
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineAudioBufferSourceNodeFakerOptions);
    readonly proxy: OfflineAudioBufferSourceNodeFakerProxy;
    start: {
        duration?: number;
        offset: number;
        when: number;
    };
    render(offlineAudioContext: TUnpatchedOfflineAudioContext): Promise<AudioBufferSourceNode>;
    wire(source: IOfflineAudioNodeFaker, output: number, input: number): OfflineAudioBufferSourceNodeFakerProxy;
    unwire(source: IOfflineAudioNodeFaker): void;
}
export interface IOfflineAudioBufferSourceNodeFakerFactoryOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioBufferSourceNodeFakerFactory {
    create({fakeNodeStore, offlineAudioContext}: IOfflineAudioBufferSourceNodeFakerFactoryOptions): OfflineAudioBufferSourceNodeFaker;
}
