import { IAudioDestinationNode, IAudioNode, IOfflineAudioContext, IOfflineAudioNodeFaker } from '../interfaces';
import { OfflineAudioNodeProxy } from '../offline-audio-node';
import { TUnpatchedOfflineAudioContext } from '../types';
export interface IOfflineAudioDestinationNodeFakerProxyOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioDestinationNodeFakerProxy extends OfflineAudioNodeProxy implements IAudioDestinationNode {
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineAudioDestinationNodeFakerProxyOptions);
    readonly maxChannelCount: number;
}
export interface IOfflineAudioDestinationNodeFakerOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioDestinationNodeFaker implements IOfflineAudioNodeFaker {
    private _node;
    private _proxy;
    private _sources;
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineAudioDestinationNodeFakerOptions);
    readonly proxy: OfflineAudioDestinationNodeFakerProxy;
    render(offlineAudioContext: TUnpatchedOfflineAudioContext): Promise<AudioDestinationNode>;
    wire(source: IOfflineAudioNodeFaker, output: number, input: number): OfflineAudioDestinationNodeFakerProxy;
    unwire(source: IOfflineAudioNodeFaker): void;
}
export interface IOfflineAudioDestinationNodeFakerFactoryOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioDestinationNodeFakerFactory {
    create({fakeNodeStore, offlineAudioContext}: IOfflineAudioDestinationNodeFakerFactoryOptions): OfflineAudioDestinationNodeFaker;
}
