import { IAudioNode, IBiquadFilterNode, IOfflineAudioContext, IOfflineAudioNodeFaker } from '../interfaces';
import { OfflineAudioNodeProxy } from '../offline-audio-node';
import { TUnpatchedOfflineAudioContext } from '../types';
export interface IOfflineBiquadFilterNodeFakerProxyOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    nativeNode: BiquadFilterNode;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineBiquadFilterNodeFakerProxy extends OfflineAudioNodeProxy implements IBiquadFilterNode {
    private _nativeNode;
    private _type;
    constructor({fakeNodeStore, nativeNode, offlineAudioContext}: IOfflineBiquadFilterNodeFakerProxyOptions);
    readonly detune: {
        cancelScheduledValues: (startTime: number) => any;
        defaultValue: number;
        exponentialRampToValueAtTime: (value: number, endTime: number) => any;
        linearRampToValueAtTime: (value: number, endTime: number) => any;
        setTargetAtTime: (target: number, startTime: number, timeConstant: number) => any;
        setValueAtTime: (value: number, startTime: number) => any;
        setValueCurveAtTime: (values: Float32Array, startTime: number, duration: number) => any;
        value: number;
    };
    readonly frequency: {
        cancelScheduledValues: (startTime: number) => any;
        defaultValue: number;
        exponentialRampToValueAtTime: (value: number, endTime: number) => any;
        linearRampToValueAtTime: (value: number, endTime: number) => any;
        setTargetAtTime: (target: number, startTime: number, timeConstant: number) => any;
        setValueAtTime: (value: number, startTime: number) => any;
        setValueCurveAtTime: (values: Float32Array, startTime: number, duration: number) => any;
        value: number;
    };
    readonly gain: {
        cancelScheduledValues: (startTime: number) => any;
        defaultValue: number;
        exponentialRampToValueAtTime: (value: number, endTime: number) => any;
        linearRampToValueAtTime: (value: number, endTime: number) => any;
        setTargetAtTime: (target: number, startTime: number, timeConstant: number) => any;
        setValueAtTime: (value: number, startTime: number) => any;
        setValueCurveAtTime: (values: Float32Array, startTime: number, duration: number) => any;
        value: number;
    };
    readonly Q: {
        cancelScheduledValues: (startTime: number) => any;
        defaultValue: number;
        exponentialRampToValueAtTime: (value: number, endTime: number) => any;
        linearRampToValueAtTime: (value: number, endTime: number) => any;
        setTargetAtTime: (target: number, startTime: number, timeConstant: number) => any;
        setValueAtTime: (value: number, startTime: number) => any;
        setValueCurveAtTime: (values: Float32Array, startTime: number, duration: number) => any;
        value: number;
    };
    type: BiquadFilterType;
    getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;
}
export interface IOfflineBiquadFilterNodeFakerOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    nativeNode: BiquadFilterNode;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineBiquadFilterNodeFaker implements IOfflineAudioNodeFaker {
    private _node;
    private _proxy;
    private _sources;
    constructor({fakeNodeStore, nativeNode, offlineAudioContext}: IOfflineBiquadFilterNodeFakerOptions);
    readonly proxy: OfflineBiquadFilterNodeFakerProxy;
    render(offlineAudioContext: TUnpatchedOfflineAudioContext): Promise<BiquadFilterNode>;
    wire(source: IOfflineAudioNodeFaker, output: number, input: number): OfflineBiquadFilterNodeFakerProxy;
    unwire(source: IOfflineAudioNodeFaker): void;
}
export interface IOfflineBiquadFilterNodeFakerFactoryOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    nativeNode: BiquadFilterNode;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineBiquadFilterNodeFakerFactory {
    create({fakeNodeStore, nativeNode, offlineAudioContext}: IOfflineBiquadFilterNodeFakerFactoryOptions): OfflineBiquadFilterNodeFaker;
}
