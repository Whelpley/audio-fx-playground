import { IAudioNode, IGainNode, IOfflineAudioContext, IOfflineAudioNodeFaker } from '../interfaces';
import { OfflineAudioNodeProxy } from '../offline-audio-node';
import { TUnpatchedOfflineAudioContext } from '../types';
export interface IOfflineGainNodeFakerProxyOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineGainNodeFakerProxy extends OfflineAudioNodeProxy implements IGainNode {
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineGainNodeFakerProxyOptions);
    readonly gain: AudioParam;
}
export interface IOfflineGainNodeFakerOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineGainNodeFaker implements IOfflineAudioNodeFaker {
    private _node;
    private _proxy;
    private _sources;
    constructor({fakeNodeStore, offlineAudioContext}: IOfflineGainNodeFakerOptions);
    readonly proxy: OfflineGainNodeFakerProxy;
    render(offlineAudioContext: TUnpatchedOfflineAudioContext): Promise<GainNode>;
    wire(source: IOfflineAudioNodeFaker, output: number, input: number): OfflineGainNodeFakerProxy;
    unwire(source: IOfflineAudioNodeFaker): void;
}
export interface IOfflineGainNodeFakerFactoryOptions {
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineGainNodeFakerFactory {
    create({fakeNodeStore, offlineAudioContext}: IOfflineGainNodeFakerFactoryOptions): OfflineGainNodeFaker;
}
