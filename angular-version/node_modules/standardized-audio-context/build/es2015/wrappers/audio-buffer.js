var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { IndexSizeErrorFactory } from '../factories/index-size-error';
let AudioBufferWrapper = class AudioBufferWrapper {
    constructor(_indexSizeErrorFactory) {
        this._indexSizeErrorFactory = _indexSizeErrorFactory;
    }
    wrap(audioBuffer) {
        audioBuffer.copyFromChannel = (destination, channelNumber, startInChannel = 0) => {
            if (channelNumber >= audioBuffer.numberOfChannels || startInChannel >= audioBuffer.length) {
                throw this._indexSizeErrorFactory.create();
            }
            const channelData = audioBuffer.getChannelData(channelNumber);
            const channelLength = channelData.length;
            const destinationLength = destination.length;
            for (let i = 0; i + startInChannel < channelLength && i < destinationLength; i += 1) {
                destination[i] = channelData[i + startInChannel];
            }
        };
        audioBuffer.copyToChannel = (source, channelNumber, startInChannel = 0) => {
            if (channelNumber >= audioBuffer.numberOfChannels || startInChannel >= audioBuffer.length) {
                throw this._indexSizeErrorFactory.create();
            }
            const channelData = audioBuffer.getChannelData(channelNumber);
            const channelLength = channelData.length;
            const sourceLength = source.length;
            for (let i = 0; i + startInChannel < channelLength && i < sourceLength; i += 1) {
                channelData[i + startInChannel] = source[i];
            }
        };
    }
};
AudioBufferWrapper = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [IndexSizeErrorFactory])
], AudioBufferWrapper);
export { AudioBufferWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/audio-buffer.js.map