var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { NotSupportedErrorFactory } from '../factories/not-supported-error';
let IIRFilterNodeGetFrequencyResponseMethodWrapper = class IIRFilterNodeGetFrequencyResponseMethodWrapper {
    constructor(_notSupportedErrorFactory) {
        this._notSupportedErrorFactory = _notSupportedErrorFactory;
    }
    wrap(iIRFilterNode) {
        iIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {
            return (frequencyHz, magResponse, phaseResponse) => {
                if (magResponse.length === 0 || phaseResponse.length === 0) {
                    throw this._notSupportedErrorFactory.create();
                }
                return getFrequencyResponse.call(iIRFilterNode, frequencyHz, magResponse, phaseResponse);
            };
        })(iIRFilterNode.getFrequencyResponse);
    }
};
IIRFilterNodeGetFrequencyResponseMethodWrapper = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [NotSupportedErrorFactory])
], IIRFilterNodeGetFrequencyResponseMethodWrapper);
export { IIRFilterNodeGetFrequencyResponseMethodWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/iir-filter-node-get-frequency-response-method.js.map