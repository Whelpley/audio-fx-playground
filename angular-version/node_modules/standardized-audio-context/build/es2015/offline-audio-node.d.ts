import { IOfflineAudioContext, IOfflineAudioNodeFaker, IAudioNode } from './interfaces';
import { TChannelCountMode, TChannelInterpretation } from './types';
export interface IAudioNodeOptions {
    channelCount?: number;
    channelCountMode: TChannelCountMode;
    channelInterpretation: TChannelInterpretation;
    fakeNodeStore: WeakMap<IAudioNode, IOfflineAudioNodeFaker>;
    numberOfInputs: number;
    numberOfOutputs: number;
    offlineAudioContext: IOfflineAudioContext;
}
export declare class OfflineAudioNodeProxy implements IAudioNode {
    private _channelCount;
    private _channelCountMode;
    private _channelInterpretation;
    private _fakeNodeStore;
    private _numberOfInputs;
    private _numberOfOutputs;
    private _offlineAudioContext;
    constructor({channelCount, channelCountMode, channelInterpretation, fakeNodeStore, numberOfInputs, numberOfOutputs, offlineAudioContext}: IAudioNodeOptions);
    channelCount: number;
    channelCountMode: ChannelCountMode;
    channelInterpretation: ChannelInterpretation;
    readonly context: IOfflineAudioContext;
    numberOfInputs: number;
    numberOfOutputs: number;
    addEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    connect(destination: IAudioNode, output?: number, input?: number): IAudioNode;
    disconnect(destination: IAudioNode): void;
    dispatchEvent(evt: Event): boolean;
    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}
