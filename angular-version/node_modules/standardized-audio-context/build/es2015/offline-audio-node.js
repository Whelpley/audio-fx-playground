export class OfflineAudioNodeProxy {
    constructor({ channelCount = 2, channelCountMode, channelInterpretation, fakeNodeStore, numberOfInputs, numberOfOutputs, offlineAudioContext }) {
        this._channelCount = channelCount;
        this._channelCountMode = channelCountMode;
        this._channelInterpretation = channelInterpretation;
        this._fakeNodeStore = fakeNodeStore;
        this._numberOfInputs = numberOfInputs;
        this._numberOfOutputs = numberOfOutputs;
        this._offlineAudioContext = offlineAudioContext;
    }
    get channelCount() {
        return this._channelCount;
    }
    set channelCount(value) {
        this._channelCount = value;
    }
    get channelCountMode() {
        return this._channelCountMode;
    }
    set channelCountMode(value) {
        this._channelCountMode = value;
    }
    get channelInterpretation() {
        return this._channelInterpretation;
    }
    set channelInterpretation(value) {
        this._channelInterpretation = value;
    }
    get context() {
        return this._offlineAudioContext;
    }
    get numberOfInputs() {
        return this._numberOfInputs;
    }
    set numberOfInputs(value) {
        this._numberOfInputs = value;
    }
    get numberOfOutputs() {
        return this._numberOfOutputs;
    }
    set numberOfOutputs(value) {
        this._numberOfOutputs = value;
    }
    addEventListener(type, listener, options) {
        // @todo
        type;
        listener;
        options;
    }
    connect(destination, output = 0, input = 0) {
        const faker = this._fakeNodeStore.get(destination);
        if (faker === undefined) {
            let exception;
            // @todo Use the error factory.
            try {
                exception = new DOMException('', 'InvalidAccessError');
            }
            catch (err) {
                exception = new Error();
                exception.code = 15;
                exception.name = 'InvalidAccessError';
            }
            throw exception;
        }
        const source = this._fakeNodeStore.get(this);
        if (source === undefined) {
            throw new Error();
        }
        return faker.wire(source, output, input);
    }
    disconnect(destination) {
        const faker = this._fakeNodeStore.get(destination);
        if (faker === undefined) {
            throw new Error();
        }
        const source = this._fakeNodeStore.get(this);
        if (source === undefined) {
            throw new Error();
        }
        return faker.unwire(source);
    }
    dispatchEvent(evt) {
        // @todo
        evt;
        return false;
    }
    removeEventListener(type, listener, options) {
        // @todo
        type;
        listener;
        options;
    }
}
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/offline-audio-node.js.map