var OfflineAudioNodeProxy = (function () {
    function OfflineAudioNodeProxy(_a) {
        var _b = _a.channelCount, channelCount = _b === void 0 ? 2 : _b, channelCountMode = _a.channelCountMode, channelInterpretation = _a.channelInterpretation, fakeNodeStore = _a.fakeNodeStore, numberOfInputs = _a.numberOfInputs, numberOfOutputs = _a.numberOfOutputs, offlineAudioContext = _a.offlineAudioContext;
        this._channelCount = channelCount;
        this._channelCountMode = channelCountMode;
        this._channelInterpretation = channelInterpretation;
        this._fakeNodeStore = fakeNodeStore;
        this._numberOfInputs = numberOfInputs;
        this._numberOfOutputs = numberOfOutputs;
        this._offlineAudioContext = offlineAudioContext;
    }
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "channelCount", {
        get: function () {
            return this._channelCount;
        },
        set: function (value) {
            this._channelCount = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "channelCountMode", {
        get: function () {
            return this._channelCountMode;
        },
        set: function (value) {
            this._channelCountMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "channelInterpretation", {
        get: function () {
            return this._channelInterpretation;
        },
        set: function (value) {
            this._channelInterpretation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "context", {
        get: function () {
            return this._offlineAudioContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "numberOfInputs", {
        get: function () {
            return this._numberOfInputs;
        },
        set: function (value) {
            this._numberOfInputs = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfflineAudioNodeProxy.prototype, "numberOfOutputs", {
        get: function () {
            return this._numberOfOutputs;
        },
        set: function (value) {
            this._numberOfOutputs = value;
        },
        enumerable: true,
        configurable: true
    });
    OfflineAudioNodeProxy.prototype.addEventListener = function (type, listener, options) {
        // @todo
        type;
        listener;
        options;
    };
    OfflineAudioNodeProxy.prototype.connect = function (destination, output, input) {
        if (output === void 0) { output = 0; }
        if (input === void 0) { input = 0; }
        var faker = this._fakeNodeStore.get(destination);
        if (faker === undefined) {
            var exception = void 0;
            // @todo Use the error factory.
            try {
                exception = new DOMException('', 'InvalidAccessError');
            }
            catch (err) {
                exception = new Error();
                exception.code = 15;
                exception.name = 'InvalidAccessError';
            }
            throw exception;
        }
        var source = this._fakeNodeStore.get(this);
        if (source === undefined) {
            throw new Error();
        }
        return faker.wire(source, output, input);
    };
    OfflineAudioNodeProxy.prototype.disconnect = function (destination) {
        var faker = this._fakeNodeStore.get(destination);
        if (faker === undefined) {
            throw new Error();
        }
        var source = this._fakeNodeStore.get(this);
        if (source === undefined) {
            throw new Error();
        }
        return faker.unwire(source);
    };
    OfflineAudioNodeProxy.prototype.dispatchEvent = function (evt) {
        // @todo
        evt;
        return false;
    };
    OfflineAudioNodeProxy.prototype.removeEventListener = function (type, listener, options) {
        // @todo
        type;
        listener;
        options;
    };
    return OfflineAudioNodeProxy;
}());
export { OfflineAudioNodeProxy };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/offline-audio-node.js.map