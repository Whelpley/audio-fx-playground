var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { OfflineAudioNodeProxy } from '../offline-audio-node';
var OfflineAudioDestinationNodeFakerProxy = (function (_super) {
    __extends(OfflineAudioDestinationNodeFakerProxy, _super);
    function OfflineAudioDestinationNodeFakerProxy(_a) {
        var fakeNodeStore = _a.fakeNodeStore, offlineAudioContext = _a.offlineAudioContext;
        return _super.call(this, {
            channelCount: 2,
            channelCountMode: 'max',
            channelInterpretation: 'speakers',
            fakeNodeStore: fakeNodeStore,
            numberOfInputs: 1,
            numberOfOutputs: 0,
            offlineAudioContext: offlineAudioContext
        }) || this;
    }
    Object.defineProperty(OfflineAudioDestinationNodeFakerProxy.prototype, "maxChannelCount", {
        get: function () {
            // @todo
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    return OfflineAudioDestinationNodeFakerProxy;
}(OfflineAudioNodeProxy));
export { OfflineAudioDestinationNodeFakerProxy };
var OfflineAudioDestinationNodeFaker = (function () {
    function OfflineAudioDestinationNodeFaker(_a) {
        var fakeNodeStore = _a.fakeNodeStore, offlineAudioContext = _a.offlineAudioContext;
        this._node = null;
        this._proxy = new OfflineAudioDestinationNodeFakerProxy({ fakeNodeStore: fakeNodeStore, offlineAudioContext: offlineAudioContext });
        this._sources = new Map();
        fakeNodeStore.set(this._proxy, this);
    }
    Object.defineProperty(OfflineAudioDestinationNodeFaker.prototype, "proxy", {
        get: function () {
            return this._proxy;
        },
        enumerable: true,
        configurable: true
    });
    OfflineAudioDestinationNodeFaker.prototype.render = function (offlineAudioContext) {
        var _this = this;
        if (this._node !== null) {
            return Promise.resolve(this._node);
        }
        this._node = offlineAudioContext.destination;
        var promises = Array
            .from(this._sources)
            .map(function (_a) {
            var source = _a[0], _b = _a[1], input = _b.input, output = _b.output;
            // For some reason this currently needs to be a function body with a return statement. The shortcut syntax causes an error.
            return source
                .render(offlineAudioContext)
                .then(function (node) { return node.connect(_this._node, output, input); });
        });
        return Promise
            .all(promises)
            .then(function () { return _this._node; });
    };
    OfflineAudioDestinationNodeFaker.prototype.wire = function (source, output, input) {
        this._sources.set(source, { input: input, output: output });
        return this._proxy;
    };
    OfflineAudioDestinationNodeFaker.prototype.unwire = function (source) {
        this._sources.delete(source);
    };
    return OfflineAudioDestinationNodeFaker;
}());
export { OfflineAudioDestinationNodeFaker };
var OfflineAudioDestinationNodeFakerFactory = (function () {
    function OfflineAudioDestinationNodeFakerFactory() {
    }
    OfflineAudioDestinationNodeFakerFactory.prototype.create = function (_a) {
        var fakeNodeStore = _a.fakeNodeStore, offlineAudioContext = _a.offlineAudioContext;
        return new OfflineAudioDestinationNodeFaker({ fakeNodeStore: fakeNodeStore, offlineAudioContext: offlineAudioContext });
    };
    return OfflineAudioDestinationNodeFakerFactory;
}());
export { OfflineAudioDestinationNodeFakerFactory };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/factories/offline-audio-destination-node.js.map