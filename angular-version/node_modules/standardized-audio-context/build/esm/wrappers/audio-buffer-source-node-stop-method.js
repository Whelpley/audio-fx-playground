var AudioBufferSourceNodeStopMethodWrapper = (function () {
    function AudioBufferSourceNodeStopMethodWrapper() {
    }
    AudioBufferSourceNodeStopMethodWrapper.prototype.wrap = function (audioBufferSourceNode, audioContext) {
        var gainNode = audioContext.createGain();
        audioBufferSourceNode.connect(gainNode);
        audioBufferSourceNode.addEventListener('ended', function () { return audioBufferSourceNode.disconnect(gainNode); });
        audioBufferSourceNode.connect = function (destination, output, input) {
            if (output === void 0) { output = 0; }
            if (input === void 0) { input = 0; }
            gainNode.connect.call(gainNode, destination, output, input);
            return destination;
        };
        audioBufferSourceNode.disconnect = function () {
            gainNode.disconnect.apply(gainNode, arguments);
        };
        audioBufferSourceNode.stop = (function (stop) {
            var isStopped = false;
            return function (when) {
                if (when === void 0) { when = 0; }
                if (isStopped) {
                    try {
                        stop.call(audioBufferSourceNode, when);
                    }
                    catch (err) {
                        gainNode.gain.setValueAtTime(0, when);
                    }
                }
                else {
                    stop.call(audioBufferSourceNode, when);
                    isStopped = true;
                }
            };
        })(audioBufferSourceNode.stop);
    };
    return AudioBufferSourceNodeStopMethodWrapper;
}());
export { AudioBufferSourceNodeStopMethodWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/audio-buffer-source-node-stop-method.js.map