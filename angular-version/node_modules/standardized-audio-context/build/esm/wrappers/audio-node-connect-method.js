var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { InvalidAccessErrorFactory } from '../factories/invalid-access-error';
var AudioNodeConnectMethodWrapper = (function () {
    function AudioNodeConnectMethodWrapper(_invalidAccessErrorFactory) {
        this._invalidAccessErrorFactory = _invalidAccessErrorFactory;
    }
    AudioNodeConnectMethodWrapper.prototype.wrap = function (audioNode, isSupportingChaining) {
        var _this = this;
        audioNode.connect = (function (connect, sSpprtngChnng) {
            if (sSpprtngChnng) {
                return function (destination, output, input) {
                    if (output === void 0) { output = 0; }
                    if (input === void 0) { input = 0; }
                    try {
                        return connect.call(audioNode, destination, output, input);
                    }
                    catch (err) {
                        if (err.code === 12) {
                            throw _this._invalidAccessErrorFactory.create();
                        }
                        throw err;
                    }
                };
            }
            else {
                return function (destination, output, input) {
                    if (output === void 0) { output = 0; }
                    if (input === void 0) { input = 0; }
                    try {
                        connect.call(audioNode, destination, output, input);
                    }
                    catch (err) {
                        if (err.code === 12) {
                            throw _this._invalidAccessErrorFactory.create();
                        }
                        throw err;
                    }
                    return destination;
                };
            }
        })(audioNode.connect, isSupportingChaining);
    };
    return AudioNodeConnectMethodWrapper;
}());
AudioNodeConnectMethodWrapper = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InvalidAccessErrorFactory])
], AudioNodeConnectMethodWrapper);
export { AudioNodeConnectMethodWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/audio-node-connect-method.js.map