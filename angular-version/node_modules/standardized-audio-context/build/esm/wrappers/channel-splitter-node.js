var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { InvalidStateErrorFactory } from '../factories/invalid-state-error';
var ChannelSplitterNodeWrapper = (function () {
    function ChannelSplitterNodeWrapper(_invalidStateErrorFactory) {
        this._invalidStateErrorFactory = _invalidStateErrorFactory;
    }
    ChannelSplitterNodeWrapper.prototype.wrap = function (channelSplitterNode) {
        var _this = this;
        channelSplitterNode.channelCountMode = 'explicit';
        channelSplitterNode.channelInterpretation = 'discrete';
        Object.defineProperty(channelSplitterNode, 'channelCountMode', {
            get: function () { return 'explicit'; },
            set: function () {
                throw _this._invalidStateErrorFactory.create();
            }
        });
        Object.defineProperty(channelSplitterNode, 'channelInterpretation', {
            get: function () { return 'discrete'; },
            set: function () {
                throw _this._invalidStateErrorFactory.create();
            }
        });
    };
    return ChannelSplitterNodeWrapper;
}());
ChannelSplitterNodeWrapper = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InvalidStateErrorFactory])
], ChannelSplitterNodeWrapper);
export { ChannelSplitterNodeWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/channel-splitter-node.js.map