var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { InvalidStateErrorFactory } from '../factories/invalid-state-error';
var ChannelMergerNodeWrapper = (function () {
    function ChannelMergerNodeWrapper(_invalidStateErrorFactory) {
        this._invalidStateErrorFactory = _invalidStateErrorFactory;
    }
    ChannelMergerNodeWrapper.prototype.wrap = function (audioContext, channelMergerNode) {
        var _this = this;
        var audioBufferSourceNode = audioContext.createBufferSource();
        channelMergerNode.channelCount = 1;
        channelMergerNode.channelCountMode = 'explicit';
        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
        var length = channelMergerNode.numberOfInputs;
        for (var i = 0; i < length; i += 1) {
            audioBufferSourceNode.connect(channelMergerNode, 0, i);
        }
        Object.defineProperty(channelMergerNode, 'channelCount', {
            get: function () { return 1; },
            set: function () {
                throw _this._invalidStateErrorFactory.create();
            }
        });
        Object.defineProperty(channelMergerNode, 'channelCountMode', {
            get: function () { return 'explicit'; },
            set: function () {
                throw _this._invalidStateErrorFactory.create();
            }
        });
    };
    return ChannelMergerNodeWrapper;
}());
ChannelMergerNodeWrapper = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InvalidStateErrorFactory])
], ChannelMergerNodeWrapper);
export { ChannelMergerNodeWrapper };
//# sourceMappingURL=/users/chrisguttandin/repositories/standardized-audio-context/node_modules/tsconfig-holy-grail/src/wrappers/channel-merger-node.js.map